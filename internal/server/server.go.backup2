package server

import (
	"crypto/tls"
	"log"
	"net/http"
	"os"
	"vasek/internal/handlers"
)

type Server struct {
	clientHandler *handlers.RequestHandler
}

func NewServer(clientHandler *handlers.RequestHandler) *Server {
	return &Server{clientHandler: clientHandler}
}

func enableCORS(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusOK)
			return
		}
		next.ServeHTTP(w, r)
	}
}

func (s *Server) rootHandler(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}
	
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	html := `<!DOCTYPE html>
<html>
<head>
    <title>Voenhelper API</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 40px; }
        .endpoint { background: #f5f5f5; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .method { font-weight: bold; color: #2196F3; }
        .path { font-family: monospace; background: #fff; padding: 5px 10px; border-radius: 3px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>ðŸš€ Voenhelper API</h1>
        <p>API Service is running successfully</p>
    </div>
    
    <h2>Available Endpoints:</h2>
    
    <div class="endpoint">
        <div class="method">GET</div>
        <div class="path">/get</div>
        <p>Retrieve requests</p>
    </div>
    
    <div class="endpoint">
        <div class="method">POST</div>
        <div class="path">/create</div>
        <p>Create new request</p>
    </div>
    
    <div style="margin-top: 40px; text-align: center; color: #666;">
        <p>API available at: <a href="https://www.voenhelper.ru">www.voenhelper.ru</a></p>
    </div>
</body>
</html>`
	
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(html))
}

func (s *Server) Start() {
	// Setup routes
	http.HandleFunc("/", s.rootHandler)
	http.HandleFunc("/get", enableCORS(s.clientHandler.GetRequestsHandler))
	http.HandleFunc("/create", enableCORS(s.clientHandler.CreateRequestHandler))

	// Get SSL configuration
	enableSSL := getEnv("ENABLE_SSL", "false") == "true"
	certFile := getEnv("SSL_CERT_FILE", "/certs/server.crt")
	keyFile := getEnv("SSL_KEY_FILE", "/certs/server.key")
	httpPort := getEnv("HTTP_PORT", "8080")
	httpsPort := getEnv("HTTPS_PORT", "8443")

	if enableSSL {
		// Check if certificate files exist
		if _, err := os.Stat(certFile); os.IsNotExist(err) {
			log.Printf("SSL certificate file not found at %s, generating self-signed certificate", certFile)
			if err := generateSelfSignedCert(certFile, keyFile); err != nil {
				log.Fatalf("Failed to generate self-signed certificate: %v", err)
			}
		}

		// Start HTTPS server
		go func() {
			log.Printf("Starting HTTPS server on port %s", httpsPort)
			server := &http.Server{
				Addr: ":" + httpsPort,
				TLSConfig: &tls.Config{
					MinVersion: tls.VersionTLS12,
				},
			}
			log.Fatal(server.ListenAndServeTLS(certFile, keyFile))
		}()

		// Redirect HTTP to HTTPS
		go func() {
			log.Printf("Starting HTTP redirect server on port %s", httpPort)
			redirectServer := &http.Server{
				Addr: ":" + httpPort,
				Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
					target := "https://" + r.Host + r.URL.Path
					if len(r.URL.RawQuery) > 0 {
						target += "?" + r.URL.RawQuery
					}
					http.Redirect(w, r, target, http.StatusMovedPermanently)
				}),
			}
			log.Fatal(redirectServer.ListenAndServe())
		}()

		// Keep main goroutine alive
		select {}
	} else {
		// Start HTTP server only
		log.Printf("Starting HTTP server on port %s", httpPort)
		log.Fatal(http.ListenAndServe(":"+httpPort, nil))
	}
}

func getEnv(key, defaultValue string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	return defaultValue
}
